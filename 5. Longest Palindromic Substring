# 1. DP
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        
        n = len(s)
        
        # Initialize the track table
        tb = [[0 for x in range(n)] for y in range(n)]
        
        maxlen = 1
        for i in range(n):
            tb[i][i]=1
        
        start = 0
        for i in range(n-1):
            if s[i]==s[i+1]:
                tb[i][i+1]=1
                start = i
                maxlen = 2
        
        k = 3
        while k <= n:
            i = 0
            while i < n-k+1:
                j = i + k -1
                if tb[i+1][j-1]==1 and s[i]==s[j]:
                    tb[i][j]=1
                    if k > maxlen:
                        maxlen = k
                        start = i
                i += 1
            k += 1
        return s[start : start+maxlen]
 
 # 2. Expand around centers
 class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        
        n = len(s)
        maxlen, start = 1, 0
        high, low = 0, 0
        
        for i in range(1,n):
            
            low = i-1
            high = i
            while (low>=0 and high<n) and s[high]==s[low]:
                if high - low + 1 > maxlen:
                    maxlen = high-low+1
                    start = low
                high += 1
                low -= 1
            
            low = i-1
            high = i+1
            while (low>=0 and high<n) and s[high]==s[low]:
                if high - low + 1 > maxlen:
                    maxlen = high-low+1
                    start = low
                high += 1
                low -= 1
                
       
        return s[start:start+maxlen]
        
        
        
